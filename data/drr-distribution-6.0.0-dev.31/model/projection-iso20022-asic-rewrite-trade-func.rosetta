namespace drr.projection.iso20022.asic.rewrite.trade
version "6.0.0-dev.31"

import drr.projection.iso20022.common.*
import drr.regulation.common.*
import drr.standards.iso.* as iso
import drr.regulation.asic.rewrite.trade.*
import drr.regulation.common.util.*
import iso20022.auth030.asic.*
import cdm.base.staticdata.asset.common.*
import cdm.base.math.*

func Project_ASICTradeReportToIso20022:
    [projection XML]
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        iso20022Report Document (1..1)

    set iso20022Report -> derivsTradRpt -> rptHdr: Create_TradeReportHeader

    set iso20022Report -> derivsTradRpt -> tradData -> rpt:
        Create_TradeReport33Choice__1(drrReport)

func Create_TradeReportHeader:
    output:
        rptHdr TradeReportHeader4__1 (1..1)

    set rptHdr:
        TradeReportHeader4__1 {
            nbRcrds: 1,
            ...
        }

func Create_TradeReport33Choice__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        rpt TradeReport33Choice__1 (1..1)

    alias actionType: drrReport -> actionType
//    alias lvl: drrReport -> level
    set rpt:
        TradeReport33Choice__1 {
            new: if actionType = NEWT
                then TradeData43__1 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__1(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                },
            mod: if actionType = MODI
                then TradeData43__2 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__2(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                },
            crrctn: if actionType = CORR
                then TradeData43__3 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__3(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                },
            termntn: if actionType = TERM
                then TradeData43__4 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__2(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__4(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                },
            valtnUpd: if actionType = VALU
                then TradeData43__5 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__3(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__5(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                },
            err: if actionType = EROR
                then TradeData43__6 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__2(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__6(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                },
            rvv: if actionType = REVI
                then TradeData43__3 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__3(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport)
                },
            portOut: if actionType = PRTO
                then TradeData43__7 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__2(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__7(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport)
        }}

// CounterpartySpecificData36
func Create_CounterpartySpecificData36__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__1 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__1 {
            ctrPty: Create_TradeCounterpartyReport20__1(drrReport),
            rptgTmStmp: drrReport -> reportingTimestamp
        }

func Create_CounterpartySpecificData36__2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__2 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__2 {
            ctrPty: Create_TradeCounterpartyReport20__2(drrReport),
            rptgTmStmp: drrReport -> reportingTimestamp
        }

func Create_CounterpartySpecificData36__3:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__3 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__3 {
            ctrPty: Create_TradeCounterpartyReport20__3(drrReport),
            valtn: ContractValuationData8__1 {
                ctrctVal: AmountAndDirection109__1 {
                    amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                        value: Abs(drrReport -> valuationAmount),
                        ccy: drrReport -> valuationCurrency to-string
                    },
                    sgn: if drrReport -> valuationAmount < 0
                        then False
                },
                tmStmp: drrReport -> valuationTimestamp,
                tp: drrReport -> valuationMethod to-string to-enum ValuationType1Code,
                dlta: drrReport -> delta
            },
            rptgTmStmp: drrReport -> reportingTimestamp,
        }

// TradeCounterpartyReport20
func Create_TradeCounterpartyReport20__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrPty TradeCounterpartyReport20__1 (1..1)

    set ctrPty:
        TradeCounterpartyReport20__1 {
            rptgCtrPty: Counterparty45__1 {
                id: Create_PartyIdentification248Choice__1(drrReport -> counterparty1),
                drctnOrSd: Direction4Choice {
                    ctrPtySd: drrReport -> direction1 to-string to-enum OptionParty1Code,
                    drctn: Direction2 {
                        drctnOfTheFrstLeg: drrReport -> direction2Leg1
                            to-string
                            to-enum OptionParty3Code,
                        drctnOfTheScndLeg: drrReport -> direction2Leg2
                            to-string
                            to-enum OptionParty3Code
            }},},
            othrCtrPty: Counterparty46__1 {
                idTp: Create_PartyIdentification248Choice__2(drrReport)
            },
            brkr: Create_OrganisationIdentification15Choice__1(drrReport -> broker),
            submitgAgt: GetSubmitgAgt(drrReport),
            clrMmb: Create_PartyIdentification248Choice__1(drrReport -> clearingMember),
            nttyRspnsblForRpt: GetNttyRspnsblForRpt(drrReport),
            exctnAgt: GetExctnAgt(drrReport),
            bnfcry: Create_PartyIdentification248Choice__3(
                    drrReport -> beneficiary1IdentifierTypeIndicator,
                    drrReport -> beneficiary1
                )
        }

func Create_TradeCounterpartyReport20__2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrPty TradeCounterpartyReport20__2 (1..1)

    set ctrPty:
        TradeCounterpartyReport20__2 {
            rptgCtrPty: Counterparty45__2 {
                id: Create_PartyIdentification248Choice__1(drrReport -> counterparty1)
            },
            othrCtrPty: Counterparty46__2 {
                idTp: Create_PartyIdentification248Choice__4(drrReport)
            },
            submitgAgt: GetSubmitgAgt(drrReport),
            nttyRspnsblForRpt: GetNttyRspnsblForRpt(drrReport),
            exctnAgt: GetExctnAgt(drrReport)
        }

func Create_TradeCounterpartyReport20__3:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrPty TradeCounterpartyReport20__3 (1..1)

    set ctrPty:
        TradeCounterpartyReport20__3 {
            rptgCtrPty: Counterparty45__3 {
                id: Create_PartyIdentification248Choice__1(drrReport -> counterparty1),
                rptgXmptn: ReportingExemption1__1 {
                    rsn: drrReport -> smallScaleBuySideEntityIndicator
            }},
            othrCtrPty: Counterparty46__3 {
                idTp: Create_PartyIdentification248Choice__3(
                        drrReport -> counterparty2IdentifierTypeIndicator,
                        drrReport -> counterparty2
                    )
            },
            submitgAgt: GetSubmitgAgt(drrReport),
            nttyRspnsblForRpt: GetNttyRspnsblForRpt(drrReport),
            exctnAgt: GetExctnAgt(drrReport)
        }

func GetSubmitgAgt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        submitgAgt OrganisationIdentification15Choice__1 (1..1)

    set submitgAgt:
        Create_OrganisationIdentification15Choice__1(drrReport -> reportSubmittingEntityID)

func GetNttyRspnsblForRpt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        nttyRspnsblForRpt OrganisationIdentification15Choice__1 (1..1)

    set nttyRspnsblForRpt:
        Create_OrganisationIdentification15Choice__1(drrReport -> reportingEntity)

func GetExctnAgt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        exctnAgt OrganisationIdentification15Choice__3 (0..2)

    add exctnAgt:
        if drrReport -> executionAgentCounterparty1 exists
        then OrganisationIdentification15Choice__3 {
                lei: if drrReport -> executionAgentCounterparty1 <> "NOAP"
                    then drrReport -> executionAgentCounterparty1,
                othr: OrganisationIdentification38__2 {
                    id: GenericIdentification175__1 {
                        id: if drrReport -> executionAgentCounterparty1 = "NOAP"
                            then drrReport -> executionAgentCounterparty1
        }}}

    add exctnAgt:
        if drrReport -> executionAgentCounterparty2DTCC exists
        then OrganisationIdentification15Choice__3 {
                lei: drrReport -> executionAgentCounterparty2DTCC,
                ...
            }

// PartyIdentification248Choice
func Create_PartyIdentification248Choice__1:
    inputs:
        lei string (1..1)
    output:
        id PartyIdentification248Choice__1 (1..1)

    set id:
        PartyIdentification248Choice__1 {
            lgl: LegalPersonIdentification1__1 {
                id: Create_OrganisationIdentification15Choice__1(lei)
        }}

func Create_PartyIdentification248Choice__2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        id PartyIdentification248Choice__2 (1..1)

    set id:
        PartyIdentification248Choice__2 {
            lgl: LegalPersonIdentification1__2 {
                id: Create_OrganisationIdentification15Choice__2(drrReport),
                ctry: drrReport -> countryOfTheCounterParty2 to-string
            },
            ntrl: if drrReport -> counterparty2IdentifierTypeIndicator = False
                then NaturalPersonIdentification3__1 {
                    id: NaturalPersonIdentification2__1 {
                        id: GenericIdentification175__1 {
                            id: drrReport -> counterparty2
                        },
                        nm: drrReport -> counterparty2Name
                    },
                    ctry: drrReport -> countryOfTheCounterParty2 to-string
        }}

func Create_PartyIdentification248Choice__3:
    inputs:
        leiIndicator boolean (0..1)
        idFromReport string (0..1)
    output:
        id PartyIdentification248Choice__3 (1..1)

    set id:
        PartyIdentification248Choice__3 {
            lgl: LegalPersonIdentification1__3 {
                id: Create_OrganisationIdentification15Choice__3(leiIndicator, idFromReport)
            },
            ntrl: if leiIndicator = False
                then NaturalPersonIdentification3__2 {
                    id: NaturalPersonIdentification2__2 {
                        id: GenericIdentification175__1 {
                            id: idFromReport
        }}}}

func Create_PartyIdentification248Choice__4:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        id PartyIdentification248Choice__4 (1..1)

    set id:
        PartyIdentification248Choice__4 {
            lgl: LegalPersonIdentification1__4 {
                id: Create_OrganisationIdentification15Choice__2(drrReport)
            },
            ntrl: if drrReport -> counterparty2IdentifierTypeIndicator = False
                then NaturalPersonIdentification3__3 {
                    id: NaturalPersonIdentification2__1 {
                        id: GenericIdentification175__1 {
                            id: drrReport -> counterparty2
                        },
                        nm: drrReport -> counterparty2Name
        }}}

// OrganisationIdentification15Choice
func Create_OrganisationIdentification15Choice__1:
    inputs:
        lei string (1..1)
    output:
        id OrganisationIdentification15Choice__1 (1..1)

    set id:
        OrganisationIdentification15Choice__1 {
            lei: lei
        }

func Create_OrganisationIdentification15Choice__2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        id OrganisationIdentification15Choice__2 (1..1)

    set id:
        OrganisationIdentification15Choice__2 {
            lei: if drrReport -> counterparty2IdentifierTypeIndicator = True
                then drrReport -> counterparty2,
            othr: if drrReport -> counterparty2IdentifierTypeIndicator = False
                then OrganisationIdentification38__1 {
                    id: GenericIdentification175__1 {
                        id: drrReport -> counterparty2
                    },
                    nm: drrReport -> counterparty2Name,
        }}

func Create_OrganisationIdentification15Choice__3:
    inputs:
        leiIndicator boolean (1..1)
        idFromReport string (1..1)
    output:
        id OrganisationIdentification15Choice__3 (1..1)

    set id:
        OrganisationIdentification15Choice__3 {
            lei: if leiIndicator = True then idFromReport,
            othr: if leiIndicator = False
                then OrganisationIdentification38__2 {
                    id: GenericIdentification175__1 {
                        id: idFromReport
        }}}

// CommonTradeDataReport69
func Create_CommonTradeDataReport71__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__1 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__1 {
            ctrctData: Create_ContractType15__1(drrReport),
            txData: Create_TradeTransaction50__1(drrReport)
        }

func Create_CommonTradeDataReport71__2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__2 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__2 {
            ctrctData: Create_ContractType15__1(drrReport),
            txData: Create_TradeTransaction50__2(drrReport)
        }

func Create_CommonTradeDataReport71__3:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__3 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__3 {
            ctrctData: Create_ContractType15__1(drrReport),
            txData: Create_TradeTransaction50__3(drrReport)
        }

func Create_CommonTradeDataReport71__4:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__4 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__4 {
            txData: Create_TradeTransaction50__4(drrReport),
            ctrctData: Create_ContractType15__2(drrReport)
        }

func Create_CommonTradeDataReport71__5:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__5 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__5 {
            txData: Create_TradeTransaction50__5(drrReport)
        }

func Create_CommonTradeDataReport71__6:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__6 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__6 {
            ctrctData: Create_ContractType15__2(drrReport),
            txData: Create_TradeTransaction50__6(drrReport)
        }

func Create_CommonTradeDataReport71__7:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__7 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__7 {
            ctrctData: Create_ContractType15__2(drrReport),
            txData: Create_TradeTransaction50__7(drrReport)
        }

func Create_CommonTradeDataReport69__7:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__6 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__6 {
            ctrctData: Create_ContractType15__2(drrReport),
            txData: Create_TradeTransaction50__6(drrReport)
        }

// ContractType14
func Create_ContractType15__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrctData ContractType15__1 (1..1)

    set ctrctData:
        ContractType15__1 {
            ctrctTp: drrReport -> contractType
                to-string
                to-enum FinancialInstrumentContractType2Code,
            asstClss: drrReport -> assetClass to-string to-enum ProductType4Code__1,
            pdctId: SecurityIdentification46__1 {
                unqPdctIdr: UniqueProductIdentifier2Choice__1 {
                    id: drrReport -> uniqueProductIdentifier
            }},
            undrlygInstrm: SecurityIdentification41Choice__1 {
                isin: if drrReport -> underlying -> underlyingIdentificationType = "I"
                    then drrReport -> underlying -> underlyingIdentification,
                bskt: if drrReport -> underlying -> underlyingIdentificationType = "B"
                    then CustomBasket4__1 {
                        strr: if drrReport -> customBasketCode -> basketStructurerID exists
                            then drrReport -> customBasketCode -> basketStructurerID,
                        id: if drrReport -> customBasketCode -> customBasketID exists
                            then drrReport -> customBasketCode -> customBasketID,
                        cnsttnts: drrReport -> basketConstituents
                            extract
                                BasketConstituents3__1 {
                                    instrmId: InstrumentIdentification6Choice__1 {
                                        isin: if source = ProductIdTypeEnum -> ISIN
                                            then identifier,
                                        othrId: if source <> ProductIdTypeEnum -> ISIN
                                            then GenericIdentification184 {
                                                id: identifier,
                                                src: source to-string
                }}}},
                othr: if drrReport -> underlying -> underlyingIdentificationType = "O"
                    then GenericIdentification184 {
                        id: drrReport -> underlying -> underlyingIdOther,
                        src: drrReport -> underlying -> underlyingIdOtherSource to-string
            }},
            sttlmCcy: CurrencyExchange23__1 {
                ccy: drrReport -> settlementCurrencyLeg1 to-string
            },
            sttlmCcyScndLeg: if drrReport -> settlementCurrencyLeg2 to-string = "Not Modelled"
                then empty
            else CurrencyExchange23__1 {
                ccy: drrReport -> settlementCurrencyLeg2 to-string
        }}

func Create_ContractType15__2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ctrctData ContractType15__2 (1..1)

    set ctrctData:
        ContractType15__2 {
            ctrctTp: drrReport -> contractType
                to-string
                to-enum FinancialInstrumentContractType2Code,
            asstClss: drrReport -> assetClass to-string to-enum ProductType4Code__1,
            pdctId: SecurityIdentification46__2 {
                unqPdctIdr: UniqueProductIdentifier2Choice__1 {
                    id: drrReport -> uniqueProductIdentifier
        }}}

// TradeTransaction49
func Create_TradeTransaction50__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction50__1 (1..1)

    set txData:
        TradeTransaction50__1 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__1 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary
            }},
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlAmt: GetNtnlAmt(drrReport),
            ntnlQty: GetNtnlQty(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            derivEvt: GetDerivEvt1(drrReport),
            tradClr: GetTradClr(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport),
            scndryTxId: drrReport -> secondaryTransactionIdentifier
        }

func Create_TradeTransaction50__2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction50__2 (1..1)

    set txData:
        TradeTransaction50__2 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__1 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary
            }},
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlAmt: GetNtnlAmt(drrReport),
            ntnlQty: GetNtnlQty(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            derivEvt: GetDerivEvt2(drrReport),
            tradClr: GetTradClr(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport),
            scndryTxId: drrReport -> secondaryTransactionIdentifier
        }

func Create_TradeTransaction50__3:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction50__3 (1..1)

    set txData:
        TradeTransaction50__3 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__1 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary
            }},
            exctnTmStmp: GetExctnTmStmp(drrReport),
            derivEvt: GetDerivEvt3(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            ntnlAmt: GetNtnlAmt(drrReport),
            tradClr: GetTradClr(drrReport),
            prrTxId: GetPrrTxId(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlQty: GetNtnlQty(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn(drrReport),
            cdt: GetCdt(drrReport),
            packg: GetPackg(drrReport),
            scndryTxId: drrReport -> secondaryTransactionIdentifier
        }

func Create_TradeTransaction50__4:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction50__4 (1..1)

    set txData:
        TradeTransaction50__4 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__1 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary
            }},
            exctnTmStmp: GetExctnTmStmp(drrReport),
            derivEvt: GetDerivEvt1(drrReport),
            scndryTxId: drrReport -> secondaryTransactionIdentifier,
            othrPmt: GetOthrPmt(drrReport)
        }

func Create_TradeTransaction50__5:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction50__5 (1..1)

    set txData:
        TradeTransaction50__5 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__1 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary
            }},
            intrstRate: GetIntrstRate_2(drrReport)
        }

func Create_TradeTransaction50__6:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction50__6 (1..1)

    set txData:
        TradeTransaction50__6 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__1 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary
            }},
            derivEvt: GetDerivEvt4(drrReport),
            scndryTxId: drrReport -> secondaryTransactionIdentifier
        }

func Create_TradeTransaction50__7:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txData TradeTransaction50__7 (1..1)

    set txData:
        TradeTransaction50__7 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__1 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary
            }},
            derivEvt: GetDerivEvt5(drrReport),
            scndryTxId: drrReport -> secondaryTransactionIdentifier
        }

// TradeTransaction49 helper funcs
func GetTxId:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        uti UTIIdentifier (1..1)

    set uti: drrReport -> uniqueTransactionIdentifier

func GetPrrTxId:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        prrTxId UniqueTransactionIdentifier3Choice__1 (1..1)

    set prrTxId:
        UniqueTransactionIdentifier3Choice__1 {
            unqTxIdr: drrReport -> priorUTI,
            prtry: GenericIdentification175__1 {
                id: drrReport -> priorUTIProprietary
        }}

func GetCollPrtflCd:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        collPrtflCd CollateralPortfolioCode6Choice__1 (1..1)

    set collPrtflCd:
        CollateralPortfolioCode6Choice__1 {
            mrgnPrtflCd: MarginPortfolio4__1 {
                initlMrgnPrtflCd: PortfolioCode5Choice__1 {
                    prtfl: if drrReport -> collateralPortfolioIndicator = True
                        then PortfolioIdentification3__1 {
                            cd: drrReport -> collateralPortfolioCodeInitialMargin
                        },
                    noPrtfl: if drrReport -> collateralPortfolioIndicator = False
                        then NotApplicable1Code -> NOAP
                },
                vartnMrgnPrtflCd: PortfolioCode5Choice__1 {
                    prtfl: if drrReport -> collateralPortfolioIndicator = True
                        then PortfolioIdentification3__1 {
                            cd: drrReport -> collateralPortfolioCodeVariationMargin
                        },
                    noPrtfl: if drrReport -> collateralPortfolioIndicator = False
                        then NotApplicable1Code -> NOAP
        }}}

/*
 * func GetRptTrckgNb:
 *     inputs:
 *         drrReport ASICTransactionReport (1..1)
 *     output:
 *         rptTrckgNb Max52Text (1..1)

 *     set rptTrckgNb: drrReport -> reportTrackingNumber
 */
func GetPltfmIdr:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        pltfmIdr MICIdentifier (1..1)

    set pltfmIdr: drrReport -> platformIdentifier

func GetTxPric:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        txPric PriceData2__1 (1..1)

    set txPric:
        PriceData2__1 {
            pric: drrReport -> price
                extract
                    SecuritiesTransactionPrice17Choice__1 {
                        mntryVal: if priceNotation = PriceNotationEnum -> Monetary
                            then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                    value: Abs(priceMonetary),
                                    ccy: drrReport -> price -> priceCurrency to-string
                                },
                                sgn: if priceMonetary < 0 then False
                            },
                        dcml: if priceNotation = PriceNotationEnum -> Decimal
                            then priceDecimal
                    },
            unitOfMeasr: UnitOfMeasure8Choice__1 {
                cd: drrReport -> priceUnitOfMeasure
        }}

func GetNtnlAmt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ntnlAmt NotionalAmountLegs5__1 (1..1)

    set ntnlAmt:
        NotionalAmountLegs5__1 {
            frstLeg: NotionalAmount5__1 {
                amt: AmountAndDirection106__2 {
                    amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                        value: Abs(drrReport -> notionalAmountLeg1),
                        ccy: drrReport -> notionalCurrencyLeg1 to-string
                    },
                    sgn: if drrReport -> notionalAmountLeg1 < 0
                        then False
                },
                schdlPrd: drrReport -> notionalAmountScheduleLeg1
                    extract
                        Schedule11__1 {
                            uadjstdFctvDt: effectiveDate,
                            amt: AmountAndDirection106__2 {
                                amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: Abs(amount),
                                    ccy: drrReport -> notionalCurrencyLeg1 to-string
                                },
                                sgn: if amount < 0 then False
                            },
                            ...
            }},
            scndLeg: NotionalAmount6__1 {
                amt: AmountAndDirection106__2 {
                    amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                        value: Abs(drrReport -> notionalAmountLeg2),
                        ccy: drrReport -> notionalCurrencyLeg2 to-string
                    },
                    sgn: if drrReport -> notionalAmountLeg2 < 0
                        then False
                },
                schdlPrd: drrReport -> notionalAmountScheduleLeg2
                    extract
                        Schedule11__1 {
                            uadjstdFctvDt: effectiveDate,
                            amt: AmountAndDirection106__2 {
                                amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: Abs(amount),
                                    ccy: drrReport -> notionalCurrencyLeg2 to-string
                                },
                                sgn: if amount < 0 then False
                            },
                            ...
        }} // TODO: Notional Amount End Date
        }

func GetNtnlQty:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ntnlQty NotionalQuantityLegs5__1 (0..1)

    set ntnlQty:
        NotionalQuantityLegs5__1 {
            frstLeg: NotionalQuantity9__1 {
                ttlQty: drrReport -> totalNotionalQuantityLeg1,
                unitOfMeasr: UnitOfMeasure8Choice__1 {
                    cd: drrReport -> quantityUnitOfMeasureLeg1
                },
                dtls: QuantityOrTerm1Choice__1 {
                    term: QuantityTerm1__1 {
                        qty: drrReport -> notionalQuantityLeg1
            }}},
            scndLeg: NotionalQuantity9__1 {
                ttlQty: drrReport -> totalNotionalQuantityLeg2,
                unitOfMeasr: UnitOfMeasure8Choice__1 {
                    cd: drrReport -> quantityUnitOfMeasureLeg2
                },
                dtls: QuantityOrTerm1Choice__1 {
                    term: QuantityTerm1__1 {
                        qty: drrReport -> notionalQuantityLeg2
        }}} // TODO: Notional Amount End Date
        }

func GetExctnTmStmp:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        exctnTmStmp zonedDateTime (1..1)

    set exctnTmStmp: drrReport -> executionTimestamp

func GetFctvDt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        fctvDt ISODate (1..1)

    set fctvDt: drrReport -> effectiveDate

func GetXprtnDt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        xprtnDt ISODate (1..1)

    set xprtnDt: drrReport -> expirationDate

// DerivativeEvent6
func GetDerivEvt1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__1 (1..1)

    set derivEvt:
        DerivativeEvent6__1 {
            tp: GetDerivEvtTp(drrReport),
            id: GetDerivEvtId(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__2 (1..1)

    set derivEvt:
        DerivativeEvent6__2 {
            id: GetDerivEvtId(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport),
            tp: GetDerivEvtTp(drrReport)
        }

func GetDerivEvt3:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__3 (1..1)

    set derivEvt:
        DerivativeEvent6__3 {
            id: GetDerivEvtId(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt4:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__4 (1..1)

    set derivEvt:
        DerivativeEvent6__4 {
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt5:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__5 (1..1)

    set derivEvt:
        DerivativeEvent6__5 {
            tp: GetDerivEvtTp(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvtId:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        id EventIdentifier1Choice__1 (1..1)

    set id:
        EventIdentifier1Choice__1 {
            evtIdr: drrReport -> eventIdentifier
        }

func GetDerivEvtTp:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        tp DerivativeEventType3Code__1 (1..1)

    set tp: drrReport -> eventType to-string to-enum DerivativeEventType3Code__1

func GetDerivEvtTmStmp:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        tmStmp DateAndDateTime2Choice__1 (1..1)

    set tmStmp:
        DateAndDateTime2Choice__1 {
            dtTm: drrReport -> eventTimestamp
        }

func GetTradClr:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        tradClr TradeClearing11__1 (1..1)

    set tradClr:
        TradeClearing11__1 {
            clrSts: Cleared23Choice__1 {
                clrd: if drrReport -> cleared = Y
                    then ClearingPartyAndTime21Choice__1 {
                        dtls: ClearingPartyAndTime22__1 {
                            ccp: Create_OrganisationIdentification15Choice__1(
                                    drrReport -> centralCounterparty
                                ),
                            clrDtTm: drrReport -> clearingTimestamp
                }},
                intndToClear: empty,
                nonClrd: if drrReport -> cleared = N
                    then ClearingExceptionOrExemption3Choice__1 {
                        rsn: NoReasonCode -> NORE
        }}}

func GetIntrstRate:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        intrstRate InterestRateLegs14__1 (1..1)

    set intrstRate:
        InterestRateLegs14__1 {
            frstLeg: InterestRate33Choice__1 {
                fxd: if drrReport -> fixedRateLeg1 exists
                    then Create_FixedRate(
                            drrReport -> fixedRateLeg1,
                            drrReport -> periodicPaymentLeg1 -> fixedRateDayCountConvention
                                to-string
                                to-enum InterestComputationMethod4Code,
                            drrReport -> periodicPaymentLeg1 -> fixedRatePaymentFrequencyPeriod
                                to-string
                                to-enum Frequency13Code__1,
                            drrReport -> periodicPaymentLeg1 -> fixedRatePaymentFrequencyPeriodMultiplier
                        ),
                fltg: if drrReport -> fixedRateLeg1 exists = False
                    then Create_FloatingRate(
                            drrReport -> spreadLeg1 -> spreadLeg1Monetary,
                            drrReport -> spreadLeg1 -> spreadLeg1Decimal,
                            drrReport -> spreadLeg1 -> spreadLeg1Basis,
                            drrReport -> spreadLeg1 -> spreadCurrencyLeg1 to-string,
                            drrReport -> spreadLeg1 -> spreadNotationLeg1,
                            drrReport -> periodicPaymentLeg1 -> floatingRateDayCountConvention
                                to-string
                                to-enum InterestComputationMethod4Code,
                            drrReport -> periodicPaymentLeg1 -> floatingRatePaymentFrequencyPeriod
                                to-string
                                to-enum Frequency13Code__1,
                            drrReport -> periodicPaymentLeg1 -> floatingRatePaymentFrequencyPeriodMultiplier
                        )
            },
            scndLeg: InterestRate33Choice__2 {
                fxd: if drrReport -> fixedRateLeg2 exists
                    then Create_FixedRate(
                            drrReport -> fixedRateLeg2,
                            drrReport -> periodicPaymentLeg2 -> fixedRateDayCountConvention
                                to-string
                                to-enum InterestComputationMethod4Code,
                            drrReport -> periodicPaymentLeg2 -> fixedRatePaymentFrequencyPeriod
                                to-string
                                to-enum Frequency13Code__1,
                            drrReport -> periodicPaymentLeg2 -> fixedRatePaymentFrequencyPeriodMultiplier
                        ),
                fltg: if drrReport -> fixedRateLeg2 exists = False
                    then Create_FloatingRate2(
                            drrReport -> floatingRateIndicatorLeg2,
                            drrReport -> floatingRateReferencePeriodOfLeg2TimePeriod,
                            drrReport -> floatingRateReferencePeriodOfLeg2Multiplier,
                            drrReport -> spreadLeg2 -> spreadLeg2Monetary,
                            drrReport -> spreadLeg2 -> spreadLeg2Decimal,
                            drrReport -> spreadLeg2 -> spreadLeg2Basis,
                            drrReport -> spreadLeg2 -> spreadCurrencyLeg2 to-string,
                            drrReport -> spreadLeg2 -> spreadNotationLeg2,
                            drrReport -> periodicPaymentLeg2 -> floatingRateDayCountConvention
                                to-string
                                to-enum InterestComputationMethod4Code,
                            drrReport -> periodicPaymentLeg2 -> floatingRatePaymentFrequencyPeriod
                                to-string
                                to-enum Frequency13Code__1,
                            drrReport -> periodicPaymentLeg2 -> floatingRatePaymentFrequencyPeriodMultiplier
                        )
        },}

func GetIntrstRate_2:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        intrstRate InterestRateLegs14__2 (1..1)

    set intrstRate:
        InterestRateLegs14__2 {
            frstLeg: InterestRate33Choice__3 {
                fltg: Create_FloatingRate3(drrReport -> nextFloatingReferenceResetDateLeg1)
            },
            scndLeg: InterestRate33Choice__3 {
                fltg: Create_FloatingRate3(drrReport -> nextFloatingReferenceResetDateLeg2)
        },}

func Create_FixedRate:
    inputs:
        fixedRate iso.Max11Number (0..1)
        fixedRateDayCountConvention InterestComputationMethod4Code (0..1)
        fixedRatePaymentFrequencyPeriod Frequency13Code__1 (0..1)
        fixedRatePaymentFrequencyPeriodMultiplier Max3Number (0..1)
    output:
        out FixedRate10__1 (1..1)

    set out:
        FixedRate10__1 {
            rate: SecuritiesTransactionPrice14Choice__1 {
                dcml: fixedRate
            },
            dayCnt: InterestComputationMethodFormat7__1 {
                cd: fixedRateDayCountConvention
            },
            pmtFrqcy: InterestRateFrequency3Choice__1 {
                term: InterestRateContractTerm4__1 {
                    unit: fixedRatePaymentFrequencyPeriod,
                    val: fixedRatePaymentFrequencyPeriodMultiplier
        }}}

func Create_FloatingRate:
    inputs:
        spreadOfLeg1Monetary BaseOne18Rate (0..1)
        spreadOfLeg1Decimal BaseOneRate (0..1)
        spreadOfLeg1Basis iso.BasisFormat (0..1)
        spreadCurrencyOfLeg1 string (0..1)
        spreadOfLeg1Notation PriceNotationEnum (0..1)
        floatingRateDayCountConvention InterestComputationMethod4Code (0..1)
        floatingRatePaymentFrequencyPeriod Frequency13Code__1 (0..1)
        floatingRatePaymentFrequencyPeriodMultiplier Max3Number (0..1)
    output:
        out FloatingRate13__1 (1..1)

    set out:
        FloatingRate13__1 {
            sprd: SecuritiesTransactionPrice20Choice__1 {
                mntryVal: if spreadOfLeg1Notation = PriceNotationEnum -> Monetary
                    then AmountAndDirection106__1 {
                        amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                            value: Abs(spreadOfLeg1Monetary),
                            ccy: spreadCurrencyOfLeg1 to-string
                        },
                        sgn: if spreadOfLeg1Monetary < 0 then False
                    },
                dcml: if spreadOfLeg1Notation = PriceNotationEnum -> Decimal
                    then spreadOfLeg1Decimal,
                bsisPtSprd: if spreadOfLeg1Notation = PriceNotationEnum -> Basis
                    then spreadOfLeg1Basis
            },
            dayCnt: InterestComputationMethodFormat7__1 {
                cd: floatingRateDayCountConvention
            },
            pmtFrqcy: InterestRateFrequency3Choice__1 {
                term: InterestRateContractTerm4__1 {
                    unit: floatingRatePaymentFrequencyPeriod,
                    val: floatingRatePaymentFrequencyPeriodMultiplier
        }}}

func Create_FloatingRate2:
    inputs:
        indicatorOfTheFloatingRate string (0..1)
        floatingRateReferencePeriodTimePeriod string (0..1)
        floatingRateReferencePeriodMultiplier Max3Number (0..1)
        spreadOfLeg2Monetary BaseOne18Rate (0..1)
        spreadOfLeg2Decimal BaseOneRate (0..1)
        spreadOfLeg2Basis iso.BasisFormat (0..1)
        spreadCurrencyOfLeg2 string (0..1)
        spreadOfLeg2Notation PriceNotationEnum (0..1)
        floatingRateDayCountConvention InterestComputationMethod4Code (0..1)
        floatingRatePaymentFrequencyPeriod Frequency13Code__1 (0..1)
        floatingRatePaymentFrequencyPeriodMultiplier Max3Number (0..1)
    output:
        out FloatingRate13__2 (1..1)

    set out:
        FloatingRate13__2 {
            rate: FloatingRateIdentification8Choice__1 {
                cd: indicatorOfTheFloatingRate
            },
            refPrd: InterestRateContractTerm4__2 {
                unit: floatingRateReferencePeriodTimePeriod to-enum Frequency13Code__2,
                val: floatingRateReferencePeriodMultiplier
            },
            sprd: SecuritiesTransactionPrice20Choice__1 {
                mntryVal: if spreadOfLeg2Notation = PriceNotationEnum -> Monetary
                    then AmountAndDirection106__1 {
                        amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                            value: Abs(spreadOfLeg2Monetary),
                            ccy: spreadCurrencyOfLeg2 to-string
                        },
                        sgn: if spreadOfLeg2Monetary < 0 then False
                    },
                dcml: if spreadOfLeg2Notation = PriceNotationEnum -> Decimal
                    then spreadOfLeg2Decimal,
                bsisPtSprd: if spreadOfLeg2Notation = PriceNotationEnum -> Basis
                    then spreadOfLeg2Basis
            },
            dayCnt: InterestComputationMethodFormat7__1 {
                cd: floatingRateDayCountConvention
            },
            pmtFrqcy: InterestRateFrequency3Choice__1 {
                term: InterestRateContractTerm4__1 {
                    unit: floatingRatePaymentFrequencyPeriod
                        to-string
                        to-enum Frequency13Code__1,
                    val: floatingRatePaymentFrequencyPeriodMultiplier
        }}}

func Create_FloatingRate3:
    inputs:
        nextFloatingReferenceResetDateLeg ISODate (0..1)
    output:
        out FloatingRate13__3 (1..1)

    set out:
        FloatingRate13__3 {
            nxtFltgRst: ResetDateAndValue1__1 {
                dt: nextFloatingReferenceResetDateLeg
        }}

func GetCcy:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        ccy CurrencyExchange22__1 (1..1)

    set ccy:
        CurrencyExchange22__1 {
            xchgRate: drrReport -> exchangeRate,
            xchgRateBsis: ExchangeRateBasis1Choice__1 {
                ccyPair: ExchangeRateBasis1 {
                    baseCcy: if drrReport -> assetClass = CommonAssetClass -> CURR
                        then SubString(drrReport -> exchangeRateBasis, 1, 3),
                    qtdCcy: if drrReport -> assetClass = CommonAssetClass -> CURR
                        then SubString(drrReport -> exchangeRateBasis, 5, 3)
        }}}

func GetOptn:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        optn OptionOrSwaption11__1 (1..1)

    set optn:
        OptionOrSwaption11__1 {
            strkPric: drrReport -> strikePrice
                extract
                    SecuritiesTransactionPrice17Choice__1 {
                        mntryVal: if strikePriceNotation = PriceNotationEnum -> Monetary
                            then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                    value: Abs(strikePriceMonetary),
                                    ccy: if (drrReport -> contractType = CommonContractType -> OPTN or drrReport -> contractType = CommonContractType -> SWPT)
                                            and (drrReport -> assetClass = CommonAssetClass -> CURR or drrReport -> assetClass = CommonAssetClass -> INTR) = False
                                        then drrReport -> strikePrice -> strikePriceCurrency to-string
                                },
                                sgn: if strikePriceMonetary < 0
                                    then False
                            },
                        dcml: if strikePriceNotation = PriceNotationEnum -> Decimal
                            then strikePriceDecimal
                    },
            callAmt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: drrReport -> callAmount,
                ccy: drrReport -> callCurrency to-string
            },
            putAmt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: drrReport -> putAmount,
                ccy: drrReport -> putCurrency to-string
            },
            prmAmt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: drrReport -> optionPremiumAmount,
                ccy: if drrReport -> optionPremiumCurrency exists
                    then drrReport -> optionPremiumCurrency to-string
                else if drrReport -> optionPremiumAmount = 0
                then drrReport -> settlementCurrencyLeg1 to-string
            },
            prmPmtDt: drrReport -> optionPremiumPaymentDate,
            mtrtyDtOfUndrlyg: drrReport -> maturityDateOfTheUnderlying,
            brrrLvls: Create_OptionBarrierLevel1Choice__1(drrReport)
        }

func Create_OptionBarrierLevel1Choice__1:
    inputs:
        drrReport ASICTransactionReport (0..1)
    output:
        brrrLvls OptionBarrierLevel1Choice__1 (0..1)
    set brrrLvls:
        OptionBarrierLevel1Choice__1 {
            sngl: drrReport -> barrier
                extract
                    SecuritiesTransactionPrice23Choice__1 {
                        mntryVal: if singleBarrierPriceNotation = PriceNotationEnum -> Monetary
                            then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                    value: Abs(singleBarrierPriceMonetary),
                                    ccy: singleBarrierPriceCurrency to-string
                                },
                                sgn: if singleBarrierPriceMonetary < 0
                                    then False
                            },
                        dcml: if singleBarrierPriceNotation = PriceNotationEnum -> Decimal
                            then singleBarrierPriceDecimal
                    },
            mltpl: OptionMultipleBarrierLevels1__1 {
                lwrLvl: drrReport -> barrier
                    extract
                        SecuritiesTransactionPrice23Choice__1 {
                            mntryVal: if lowerBarrierPriceNotation = PriceNotationEnum -> Monetary
                                then AmountAndDirection106__1 {
                                    amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                        value: Abs(lowerBarrierPriceMonetary),
                                        ccy: lowerBarrierPriceCurrency to-string
                                    },
                                    sgn: if lowerBarrierPriceMonetary < 0
                                        then False
                                },
                            dcml: if lowerBarrierPriceNotation = PriceNotationEnum -> Decimal
                                then lowerBarrierPriceDecimal
                        },
                upperLvl: drrReport -> barrier
                    extract
                        SecuritiesTransactionPrice23Choice__1 {
                            mntryVal: if upperBarrierPriceNotation = PriceNotationEnum -> Monetary
                                then AmountAndDirection106__1 {
                                    amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                        value: Abs(upperBarrierPriceMonetary),
                                        ccy: upperBarrierPriceCurrency to-string
                                    },
                                    sgn: if upperBarrierPriceMonetary < 0
                                        then False
                                },
                            dcml: if upperBarrierPriceNotation = PriceNotationEnum -> Decimal
                                then upperBarrierPriceDecimal
        }}}

func GetCdt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        cdt CreditDerivative4__1 (1..1)

    set cdt:
        CreditDerivative4__1 {
            indxFctr: drrReport -> indexFactor,
            trch: TrancheIndicator3Choice__1 {
                trnchd: Tranche3 {
                    attchmntPt: drrReport -> cdSIndexAttachmentPoint,
                    dtchmntPt: drrReport -> cdSIndexDetachmentPoint
        }}}

func GetOthrPmt:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        othrPmt OtherPayment5__1 (0..*)

    add othrPmt:
        drrReport -> otherPayment
            extract
                OtherPayment5__1 {
                    pmtTp: PaymentType5Choice__1 {
                        tp: paymentType to-string to-enum PaymentType4Code
                    },
                    pmtAmt: AmountAndDirection106__3 {
                        amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                            value: amount,
                            ccy: currency to-string
                    }},
                    pmtDt: date,
                    pmtPyer: PartyIdentification236Choice__1 {
                        lgl: Create_OrganisationIdentification15Choice__3(
                                payerFormat = PartyIdentifierFormatEnum -> Lei,
                                payer
                            ),
                        ntrl: NaturalPersonIdentification2__2 {
                            id: GenericIdentification175__1 {
                                id: if payerFormat = PartyIdentifierFormatEnum -> LeiAndPerson
                                    then payer
                    }}},
                    pmtRcvr: PartyIdentification236Choice__1 {
                        lgl: Create_OrganisationIdentification15Choice__3(
                                receiverFormat = PartyIdentifierFormatEnum -> Lei,
                                receiver
                            ),
                        ntrl: NaturalPersonIdentification2__2 {
                            id: GenericIdentification175__1 {
                                id: if receiverFormat = PartyIdentifierFormatEnum -> LeiAndPerson
                                    then receiver
        }}}}

func GetPackg:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        packg Package4__1 (1..1)

    set packg:
        Package4__1 {
            cmplxTradId: drrReport -> packageIdentifier,
            pric: drrReport -> packageTransactionPrice
                extract
                    SecuritiesTransactionPrice17Choice__1 {
                        mntryVal: if packageTransactionPriceNotation = PriceNotationEnum -> Monetary
                            then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                    value: Abs(packageTransactionPriceMonetary),
                                    ccy: drrReport -> packageTransactionPrice -> packageTransactionPriceCurrency to-string
                                },
                                sgn: if packageTransactionPriceMonetary < 0
                                    then False
                            },
                        dcml: if packageTransactionPriceNotation = PriceNotationEnum -> Decimal
                            then packageTransactionPriceDecimal
                    },
            sprd: drrReport -> packageTransactionSpread
                extract
                    SecuritiesTransactionPrice20Choice__1 {
                        mntryVal: if packageTransactionSpreadNotation = PriceNotationEnum -> Monetary
                            then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                    value: Abs(packageTransactionSpreadMonetary),
                                    ccy: drrReport -> packageTransactionSpread -> packageTransactionSpreadCurrency to-string
                                },
                                sgn: if packageTransactionSpreadMonetary < 0
                                    then False
                            },
                        dcml: if packageTransactionSpreadNotation = PriceNotationEnum -> Decimal
                            then packageTransactionSpreadDecimal,
                        bsisPtSprd: if packageTransactionSpreadNotation = PriceNotationEnum -> Basis
                            then packageTransactionSpreadBasis
                    },
            ...
        }

func Create_TechnicalAttributes5__1:
    inputs:
        drrReport ASICTransactionReport (1..1)
    output:
        techAttrbts TechnicalAttributes5__1 (1..1)

    set techAttrbts:
        TechnicalAttributes5__1 {
            techRcrdId: drrReport -> technicalRecordId,
            rptRctTmStmp: drrReport -> reportingTimestamp
        }
